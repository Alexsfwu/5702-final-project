ggtitle("Salary Distribution (Hourly)") +
labs(x = "Salary Range", y = "Count") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(job, aes(x = Category, y = salary)) +
geom_boxplot(color = "black", fill = "orange") +
ggtitle("Distribution of Salaries w.r.t Different Categories") +
labs(x = "Salary", y = "Category") +
theme(plot.title = element_text(hjust = 0.5)) +
coord_flip()
knitr::opts_chunk$set(warning = FALSE, message = FALSE, echo = TRUE)
library(dplyr)
library(corpus)
library(ggplot2)
library(magrittr)
library(forcats)
library(tidyverse)
# Read data from csv file and set empty slots as NAs
job <- read.csv("NYC_jobs.csv")
job[job == ''] <- NA
library(dplyr)
library(corpus)
library(ggplot2)
library(magrittr)
library(forcats)
library(tidyverse)
# Read data from csv file and set empty slots as NAs
job <- read.csv("NYC_jobs.csv")
job[job == ''] <- NA
categoryList <- job %>%
select(Job.Category, Job.ID) %>%
mutate(Job.Category = as.character(Job.Category),
Job.Category = gsub(",|&","", Job.Category),
Job.Category = as.vector(text_sub(Job.Category, 1 , 3, )),
Job.Category = trimws(Job.Category,"both")) %>%
as.data.frame() %>%
rename(Category = Job.Category)
ggplot(categoryList, aes(fct_relevel(fct_rev(fct_infreq(fct_explicit_na(Category,'NA')))))) +
geom_bar(color = "black", fill = "orange") +
ggtitle("Job Count by Category") +
labs(x = "Category", y = "Count") +
theme(plot.title = element_text(hjust = 0.5)) +
coord_flip()
job <- job%>%
mutate(salary = Salary.Range.From+(Salary.Range.To-Salary.Range.From)/2)%>%
merge(.,categoryList, by = "Job.ID")
Annual = job[job$Salary.Frequency=="Annual",]
ggplot(data = Annual, aes(Annual$salary)) +
geom_histogram(bins = 40, color = "black", fill = "orange") +
ggtitle("Salary Distribution (Annual)") +
labs(x = "Salary Range", y = "Count") +
theme(plot.title = element_text(hjust = 0.5))
Daily = job[job$Salary.Frequency=="Daily",]
ggplot(data = Daily, aes(Daily$salary)) +
geom_histogram(bins = 40, color = "black", fill = "orange") +
ggtitle("Salary Distribution (Daily)") +
labs(x = "Salary Range", y = "Count") +
theme(plot.title = element_text(hjust = 0.5))
Hourly = job[job$Salary.Frequency=="Hourly",]
ggplot(data = Hourly, aes(Hourly$salary)) +
geom_histogram(bins = 40, color = "black", fill = "orange") +
ggtitle("Salary Distribution (Hourly)") +
labs(x = "Salary Range", y = "Count") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(job, aes(x = Category, y = salary)) +
geom_boxplot(color = "black", fill = "orange") +
ggtitle("Distribution of Salaries w.r.t Different Categories") +
labs(x = "Salary", y = "Category") +
theme(plot.title = element_text(hjust = 0.5)) +
coord_flip()
install.packages("tm")
#converting salary on hourly scale to annual scale and daily scale to yearly scale
#no of working days in US in a year: 261 source:
#no of working hours in US in a day: 8.4 hours
job = job %>% mutate(salary = if_else( Salary.Frequency == "Annual", round((Salary.Range.From + Salary.Range.To)/2,2),
if_else(Salary.Frequency == "Daily", round((Salary.Range.From + Salary.Range.To)*261/2,2),
round((Salary.Range.From + Salary.Range.To)*261*8.4/2,2))
)
)
knitr::opts_chunk$set(warning = FALSE, message = FALSE, echo = TRUE)
library(dplyr)
library(corpus)
library(ggplot2)
library(magrittr)
library(forcats)
library(tidyverse)
# Read data from csv file and set empty slots as NAs
job <- read.csv("NYC_jobs.csv")
job[job == ''] <- NA
categoryList <- job %>%
select(Job.Category, Job.ID) %>%
mutate(Job.Category = as.character(Job.Category),
Job.Category = gsub(",|&","", Job.Category),
Job.Category = as.vector(text_sub(Job.Category, 1 , 3, )),
Job.Category = trimws(Job.Category,"both")) %>%
rename(Category = Job.Category)
ggplot(categoryList, aes(fct_relevel(fct_rev(fct_infreq(fct_explicit_na(Category,'NA')))))) +
geom_bar(color = "black", fill = "orange") +
ggtitle("Job Count by Category") +
labs(x = "Category", y = "Count") +
theme(plot.title = element_text(hjust = 0.5)) +
coord_flip()
job <- job%>%
mutate(salary = Salary.Range.From+(Salary.Range.To-Salary.Range.From)/2)%>%
merge(.,categoryList, by = "Job.ID")
Annual = job[job$Salary.Frequency=="Annual",]
ggplot(data = Annual, aes(Annual$salary)) +
geom_histogram(bins = 40, color = "black", fill = "orange") +
ggtitle("Salary Distribution (Annual)") +
labs(x = "Salary Range", y = "Count") +
theme(plot.title = element_text(hjust = 0.5))
Daily = job[job$Salary.Frequency=="Daily",]
ggplot(data = Daily, aes(Daily$salary)) +
geom_histogram(bins = 40, color = "black", fill = "orange") +
ggtitle("Salary Distribution (Daily)") +
labs(x = "Salary Range", y = "Count") +
theme(plot.title = element_text(hjust = 0.5))
Hourly = job[job$Salary.Frequency=="Hourly",]
ggplot(data = Hourly, aes(Hourly$salary)) +
geom_histogram(bins = 40, color = "black", fill = "orange") +
ggtitle("Salary Distribution (Hourly)") +
labs(x = "Salary Range", y = "Count") +
theme(plot.title = element_text(hjust = 0.5))
#converting salary on hourly scale to annual scale and daily scale to yearly scale
#no of working days in US in a year: 261 source:
#no of working hours in US in a day: 8.4 hours
job = job %>% mutate(salary = if_else( Salary.Frequency == "Annual", round((Salary.Range.From + Salary.Range.To)/2,2),
if_else(Salary.Frequency == "Daily", round((Salary.Range.From + Salary.Range.To)*261/2,2),
round((Salary.Range.From + Salary.Range.To)*261*8.4/2,2))
)
)
nyc_jobs %>%
filter(!is.na(Category)) %>%
ggplot(aes(x = Category, y = salary)) +
geom_boxplot(color = "black", fill = "orange") +
ggtitle("Distribution of Salaries w.r.t Different Categories") +
labs(x = "Category", y = "Salary") +
theme(plot.title = element_text(hjust = 0.5)) +
coord_flip()
library(dplyr)
library(corpus)
library(ggplot2)
library(magrittr)
library(forcats)
library(tidyverse)
# Read data from csv file and set empty slots as NAs
job <- read.csv("NYC_jobs.csv")
job[job == ''] <- NA
categoryList <- job %>%
select(Job.Category, Job.ID) %>%
mutate(Job.Category = as.character(Job.Category),
Job.Category = gsub(",|&","", Job.Category),
Job.Category = as.vector(text_sub(Job.Category, 1 , 3, )),
Job.Category = trimws(Job.Category,"both")) %>%
rename(Category = Job.Category)
ggplot(categoryList, aes(fct_relevel(fct_rev(fct_infreq(fct_explicit_na(Category,'NA')))))) +
geom_bar(color = "black", fill = "orange") +
ggtitle("Job Count by Category") +
labs(x = "Category", y = "Count") +
theme(plot.title = element_text(hjust = 0.5)) +
coord_flip()
job <- job%>%
mutate(salary = Salary.Range.From+(Salary.Range.To-Salary.Range.From)/2)%>%
merge(.,categoryList, by = "Job.ID")
Annual = job[job$Salary.Frequency=="Annual",]
ggplot(data = Annual, aes(Annual$salary)) +
geom_histogram(bins = 40, color = "black", fill = "orange") +
ggtitle("Salary Distribution (Annual)") +
labs(x = "Salary Range", y = "Count") +
theme(plot.title = element_text(hjust = 0.5))
Daily = job[job$Salary.Frequency=="Daily",]
ggplot(data = Daily, aes(Daily$salary)) +
geom_histogram(bins = 40, color = "black", fill = "orange") +
ggtitle("Salary Distribution (Daily)") +
labs(x = "Salary Range", y = "Count") +
theme(plot.title = element_text(hjust = 0.5))
Hourly = job[job$Salary.Frequency=="Hourly",]
ggplot(data = Hourly, aes(Hourly$salary)) +
geom_histogram(bins = 40, color = "black", fill = "orange") +
ggtitle("Salary Distribution (Hourly)") +
labs(x = "Salary Range", y = "Count") +
theme(plot.title = element_text(hjust = 0.5))
#converting salary on hourly scale to annual scale and daily scale to yearly scale
#no of working days in US in a year: 261 source:
#no of working hours in US in a day: 8.4 hours
job = job %>% mutate(salary = if_else( Salary.Frequency == "Annual", round((Salary.Range.From + Salary.Range.To)/2,2),
if_else(Salary.Frequency == "Daily", round((Salary.Range.From + Salary.Range.To)*261/2,2),
round((Salary.Range.From + Salary.Range.To)*261*8.4/2,2))
)
)
nyc_jobs %>%
filter(!is.na(Category)) %>%
ggplot(aes(x = Category, y = salary)) +
geom_boxplot(color = "black", fill = "orange") +
ggtitle("Distribution of Salaries w.r.t Different Categories") +
labs(x = "Category", y = "Salary") +
theme(plot.title = element_text(hjust = 0.5)) +
coord_flip()
#converting salary on hourly scale to annual scale and daily scale to yearly scale
#no of working days in US in a year: 261 source:
#no of working hours in US in a day: 8.4 hours
job = job %>% mutate(salary = if_else( Salary.Frequency == "Annual", round((Salary.Range.From + Salary.Range.To)/2,2),
if_else(Salary.Frequency == "Daily", round((Salary.Range.From + Salary.Range.To)*261/2,2),
round((Salary.Range.From + Salary.Range.To)*261*8.4/2,2))
)
)
job %>%
filter(!is.na(Category)) %>%
ggplot(aes(x = Category, y = salary)) +
geom_boxplot(color = "black", fill = "orange") +
ggtitle("Distribution of Salaries w.r.t Different Categories") +
labs(x = "Category", y = "Salary") +
theme(plot.title = element_text(hjust = 0.5)) +
coord_flip()
#converting salary on hourly scale to annual scale and daily scale to yearly scale
#no of working days in US in a year: 261 source:
#no of working hours in US in a day: 8.4 hours
job = job %>% mutate(salary = if_else( Salary.Frequency == "Annual", round((Salary.Range.From + Salary.Range.To)/2,2),
if_else(Salary.Frequency == "Daily", round((Salary.Range.From + Salary.Range.To)*261/2,2),
round((Salary.Range.From + Salary.Range.To)*261*8.4/2,2))
)
)
job %>%
filter(!is.na(Category)) %>%
ggplot(aes(x = Category, y = salary)) +
geom_boxplot(color = "black", fill = "orange") +
ggtitle("Distribution of Salaries w.r.t Different Categories") +
labs(x = "Category", y = "Salary") +
theme(plot.title = element_text(hjust = 0.5)) +
coord_flip()
knitr::opts_chunk$set(warning = FALSE, message = FALSE, echo = TRUE)
library(dplyr)
library(corpus)
library(ggplot2)
library(magrittr)
library(forcats)
library(tidyverse)
# Read data from csv file and set empty slots as NAs
job <- read.csv("data/raw/NYC_jobs.csv")
job[job == ''] <- NA
categoryList <- job %>%
select(Job.Category, Job.ID) %>%
mutate(Job.Category = as.character(Job.Category),
Job.Category = gsub(",|&","", Job.Category),
Job.Category = as.vector(text_sub(Job.Category, 1 , 3, )),
Job.Category = trimws(Job.Category,"both")) %>%
rename(Category = Job.Category)
ggplot(categoryList, aes(fct_relevel(fct_rev(fct_infreq(fct_explicit_na(Category,'NA')))))) +
geom_bar(color = "black", fill = "orange") +
ggtitle("Job Count by Category") +
labs(x = "Category", y = "Count") +
theme(plot.title = element_text(hjust = 0.5)) +
coord_flip()
job <- job%>%
mutate(salary = Salary.Range.From+(Salary.Range.To-Salary.Range.From)/2)%>%
merge(.,categoryList, by = "Job.ID")
Annual = job[job$Salary.Frequency=="Annual",]
ggplot(data = Annual, aes(Annual$salary)) +
geom_histogram(bins = 40, color = "black", fill = "orange") +
ggtitle("Salary Distribution (Annual)") +
labs(x = "Salary Range", y = "Count") +
theme(plot.title = element_text(hjust = 0.5))
Daily = job[job$Salary.Frequency=="Daily",]
ggplot(data = Daily, aes(Daily$salary)) +
geom_histogram(bins = 40, color = "black", fill = "orange") +
ggtitle("Salary Distribution (Daily)") +
labs(x = "Salary Range", y = "Count") +
theme(plot.title = element_text(hjust = 0.5))
Hourly = job[job$Salary.Frequency=="Hourly",]
ggplot(data = Hourly, aes(Hourly$salary)) +
geom_histogram(bins = 40, color = "black", fill = "orange") +
ggtitle("Salary Distribution (Hourly)") +
labs(x = "Salary Range", y = "Count") +
theme(plot.title = element_text(hjust = 0.5))
#converting salary on hourly scale to annual scale and daily scale to yearly scale
#no of working days in US in a year: 261 source:
#no of working hours in US in a day: 8.4 hours
job = job %>% mutate(salary = if_else( Salary.Frequency == "Annual", round((Salary.Range.From + Salary.Range.To)/2,2),
if_else(Salary.Frequency == "Daily", round((Salary.Range.From + Salary.Range.To)*261/2,2),
round((Salary.Range.From + Salary.Range.To)*261*8.4/2,2))
)
)
job %>%
filter(!is.na(Category)) %>%
ggplot(aes(x = Category, y = salary)) +
geom_boxplot(color = "black", fill = "orange") +
ggtitle("Distribution of Salaries w.r.t Different Categories") +
labs(x = "Category", y = "Salary") +
theme(plot.title = element_text(hjust = 0.5)) +
coord_flip()
library(dplyr)
library(corpus)
library(ggplot2)
library(magrittr)
library(forcats)
library(tidyverse)
# Read data from csv file and set empty slots as NAs
job <- read.csv("data/raw/NYC_jobs.csv")
job[job == ''] <- NA
job <- job%>%
mutate(salary = Salary.Range.From+(Salary.Range.To-Salary.Range.From)/2)%>%
merge(.,categoryList, by = "Job.ID")
Annual = job[job$Salary.Frequency=="Annual",]
ggplot(data = Annual, aes(Annual$salary)) +
geom_histogram(bins = 40, color = "black", fill = "orange") +
ggtitle("Salary Distribution (Annual)") +
labs(x = "Salary Range", y = "Count") +
theme(plot.title = element_text(hjust = 0.5))
Daily = job[job$Salary.Frequency=="Daily",]
ggplot(data = Daily, aes(Daily$salary)) +
geom_histogram(bins = 40, color = "black", fill = "orange") +
ggtitle("Salary Distribution (Daily)") +
labs(x = "Salary Range", y = "Count") +
theme(plot.title = element_text(hjust = 0.5))
Hourly = job[job$Salary.Frequency=="Hourly",]
ggplot(data = Hourly, aes(Hourly$salary)) +
geom_histogram(bins = 40, color = "black", fill = "orange") +
ggtitle("Salary Distribution (Hourly)") +
labs(x = "Salary Range", y = "Count") +
theme(plot.title = element_text(hjust = 0.5))
#converting salary on hourly scale to annual scale and daily scale to yearly scale
#no of working days in US in a year: 261 source:
#no of working hours in US in a day: 8.4 hours
job = job %>% mutate(salary = if_else( Salary.Frequency == "Annual", round((Salary.Range.From + Salary.Range.To)/2,2),
if_else(Salary.Frequency == "Daily", round((Salary.Range.From + Salary.Range.To)*261/2,2),
round((Salary.Range.From + Salary.Range.To)*261*8.4/2,2))
)
)
job %>%
filter(!is.na(Category)) %>%
ggplot(aes(x = Category, y = salary)) +
geom_boxplot(color = "black", fill = "orange") +
ggtitle("Distribution of Salaries w.r.t Different Categories") +
labs(x = "Category", y = "Salary") +
theme(plot.title = element_text(hjust = 0.5)) +
coord_flip()
install.packages("tm")
install.packages("SnowballC")
install.packages("wordcloud")
install.packages("wordcloud2")
install.packages("RColorBrewer")
library(tm)
library(SnowballC)
library(wordcloud)
library(wordcloud2)
library(RColorBrewer)
library(tm)
library(SnowballC)
library(wordcloud)
library(wordcloud2)
library(RColorBrewer)
library(tm)
library(SnowballC)
library(wordcloud)
library(wordcloud2)
library(RColorBrewer)
docs <- Corpus(VectorSource(job))
library(tm)
library(SnowballC)
library(wordcloud)
library(wordcloud2)
library(RColorBrewer)
docs <- Corpus(VectorSource(job))
inspect(docs)
library(tm)
library(SnowballC)
library(wordcloud)
library(wordcloud2)
library(RColorBrewer)
docs <- Corpus(VectorSource(job))
inspect(docs)
toSpace <- content_transformer(function (x , pattern ) gsub(pattern, " ", x))
docs <- tm_map(docs, toSpace, "/")
docs <- tm_map(docs, toSpace, "@")
docs <- tm_map(docs, toSpace, "\\|")
library(tm)
library(SnowballC)
library(wordcloud)
library(wordcloud2)
library(RColorBrewer)
mini <- Corpus(VectorSource(job$Minimum.Qual.Requirements))
inspect(mini)
toSpace <- content_transformer(function (x , pattern ) gsub(pattern, " ", x))
mini <- tm_map(mini, toSpace, "/")
mini <- tm_map(mini, toSpace, "@")
mini <- tm_map(mini, toSpace, "\\|")
library(tm)
library(SnowballC)
library(wordcloud)
library(wordcloud2)
library(RColorBrewer)
mini <- Corpus(VectorSource(job$Minimum.Qual.Requirements))
inspect(mini)
toSpace <- content_transformer(function (x , pattern ) gsub(pattern, " ", x))
mini <- tm_map(mini, toSpace, "/")
mini <- tm_map(mini, toSpace, "@")
mini <- tm_map(mini, toSpace, "\\|")
docs <- tm_map(docs, content_transformer(tolower))
# Remove numbers
docs <- tm_map(docs, removeNumbers)
# Remove english common stopwords
docs <- tm_map(docs, removeWords, stopwords("english"))
# Remove your own stop word
# specify your stopwords as a character vector
docs <- tm_map(docs, removeWords, c("blabla1", "blabla2"))
# Remove punctuations
docs <- tm_map(docs, removePunctuation)
# Eliminate extra white spaces
docs <- tm_map(docs, stripWhitespace)
# Text stemming
docs <- tm_map(docs, stemDocument)
library(tm)
library(SnowballC)
library(wordcloud)
library(wordcloud2)
library(RColorBrewer)
mini <- Corpus(VectorSource(job$Minimum.Qual.Requirements))
inspect(mini)
toSpace <- content_transformer(function (x , pattern ) gsub(pattern, " ", x))
mini <- tm_map(mini, toSpace, "/")
mini <- tm_map(mini, toSpace, "@")
mini <- tm_map(mini, toSpace, "\\|")
docs <- tm_map(docs, content_transformer(tolower))
library(tm)
library(SnowballC)
library(wordcloud)
library(wordcloud2)
library(RColorBrewer)
mini <- Corpus(VectorSource(job$Minimum.Qual.Requirements))
inspect(mini)
library(tm)
library(SnowballC)
library(wordcloud)
library(wordcloud2)
library(RColorBrewer)
mini <- Corpus(VectorSource(job$Minimum.Qual.Requirements))
// inspect(mini)
library(tm)
library(SnowballC)
library(wordcloud)
library(wordcloud2)
library(RColorBrewer)
mini <- Corpus(VectorSource(job$Minimum.Qual.Requirements))
# inspect(mini)
toSpace <- content_transformer(function (x , pattern ) gsub(pattern, " ", x))
mini <- tm_map(mini, toSpace, "/")
mini <- tm_map(mini, toSpace, "@")
mini <- tm_map(mini, toSpace, "\\|")
docs <- tm_map(docs, content_transformer(tolower))
toSpace <- content_transformer(function (x , pattern ) gsub(pattern, " ", x))
mini <- tm_map(mini, toSpace, "/")
mini <- tm_map(mini, toSpace, "@")
mini <- tm_map(mini, toSpace, "\\|")
// docs <- tm_map(docs, content_transformer(tolower))
toSpace <- content_transformer(function (x , pattern ) gsub(pattern, " ", x))
mini <- tm_map(mini, toSpace, "/")
mini <- tm_map(mini, toSpace, "@")
mini <- tm_map(mini, toSpace, "\\|")
# docs <- tm_map(docs, content_transformer(tolower))
toSpace <- content_transformer(function (x , pattern) gsub(pattern, " ", x))
mini <- tm_map(mini, toSpace, "/")
mini <- tm_map(mini, toSpace, "@")
mini <- tm_map(mini, toSpace, "\\|")
docs <- tm_map(docs, content_transformer(tolower))
# Remove numbers
docs <- tm_map(docs, removeNumbers)
# Remove english common stopwords
docs <- tm_map(docs, removeWords, stopwords("english"))
# Remove your own stop word
# specify your stopwords as a character vector
docs <- tm_map(docs, removeWords, c("blabla1", "blabla2"))
# Remove punctuations
docs <- tm_map(docs, removePunctuation)
# Eliminate extra white spaces
docs <- tm_map(docs, stripWhitespace)
# Text stemming
docs <- tm_map(docs, stemDocument)
toSpace <- content_transformer(function (x , pattern) gsub(pattern, " ", x))
mini <- tm_map(mini, toSpace, "/")
mini <- tm_map(mini, toSpace, "@")
mini <- tm_map(mini, toSpace, "\\|")
mini <- tm_map(mini, content_transformer(tolower))
# Remove numbers
mini <- tm_map(mini, removeNumbers)
# Remove english common stopwords
mini <- tm_map(mini, removeWords, stopwords("english"))
# Remove your own stop word
# specify your stopwords as a character vector
mini <- tm_map(mini, removeWords, c("blabla1", "blabla2"))
# Remove punctuations
mini <- tm_map(mini, removePunctuation)
# Eliminate extra white spaces
mini <- tm_map(mini, stripWhitespace)
# Text stemming
mini <- tm_map(mini, stemDocument)
dtm <- TermDocumentMatrix(mini)
m <- as.matrix(dtm)
v <- sort(rowSums(m), decreasing=TRUE)
d <- data.frame(word = names(v), freq=v)
head(d, 10)
set.seed(1234)
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
View(d)
View(d)
View(d)
View(d)
View(d)
View(d)
View(d)
View(d)
wordcloud2(data = d)
